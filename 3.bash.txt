bash特性:
1.命令行编辑:
	光标跳转
		Ctrl+a:跳到名利行首
		Ctrl+b:跳到名利行尾
		Ctrl+u:删除光标至命令行首的内容
		Ctrl+k:删除光标至命令行的内容
		Ctrl+左右箭头:直接跳转一个单词
		Ctrl+l:清屏
		
2.命令历史:
history:显示带有行号的命令历史
-c:清空命令历史
-d NUM:删除指定第NUM的命令历史
-d NUM1 NUM2:删除指定NUM1后NUM2个命令历史
每个用户的家目录下有个.bash_history的文件,里边有命令历史记录
环境变量HISTSIZE:定义了保存历史记录的缓冲大小

!N:执行命令历史中第N条命令
!!:执行上一条命令
!STR:执行最近一次以STR字符串开头的命令
!$:引用上一个命令的最后一个参数
按下Esc松开再按.:作用同上

明令别名:
alias CMDALIAS='COMMAND [options] [arguments]'别名带参数最好使用单引号引起来
定义的别名只在当前的shell生命周期有效,把alias命令写到bash shell的配置文件里边,可实现永久有效
unalias CMDALIAS:撤销CMDALIAS的定义

命令替换:$(COMMAND),`COMMAND`(~键反引号)
把命令中某个子命令替换为其执行结果的过程
如,echo 'the dir is $(pwd)'将当前目录用$(pwd)替换掉

bash支持的引号:
``:反引号,用于命令替换
"":弱引用,可以实现变量替换
'':强引用,不能实现变量替换

文件名通配,globbing:
*:匹配任意长度任意字符
?:匹配任意单个字符
[]:匹配指定范围内的任意单个字符[abc],[a-m],[a-z],[A-Z],[a-zA-z],[0-9]
   [[:space:]]：空白字符
   [[:punct:]]: 标点符号
   [[:lower:]]: 小写字母
   [[:upper:]]: 大写字母
   [[:alpha:]]: 所有字母
   [[:digit:]]: 数字
   [[:alnum:]]: 数字和字母
[^]:匹配指定范围外的任意单个字符

变量:
	引用变量:${VARNAME},括号可省略
	
	bash变量类型:
		环境变量:export VARNAME=VALUE,作用域为当前shell进程及其子进程 
		本地变量:VARNAME=VALUE,作用域为整个bash进程
		局部变量:local VARNAME=VALUE,作用域为当前代码段
		位置变量:$1,$2...
		特殊变量:保存特殊数据,如$?(上一命令的执行状态返回值,0为正确执行,1-255为错误执行) 

		脚本在执行时会启动一个子shell进程:
			命令行中启动的脚本会继承当前shell环境变量
			系统自动执行的脚本(非命令行启动)就需要自我定义需要的各环境变量
			
		set:查看当前变量(包括环境变量和本地变量)
		printenv:查看当前shell中环境变量
		
		变量追加:VARNAME=$VARNAMEVALUE,在原先基础上追加VALUE
		变量的默认类型为字符串型
		
脚本:命令的堆砌,按实际需要,结合命令流程控制机制实现的源程序
	脚本文件第一行为#!/bin/bash(魔数为文件起始的几个字节内容,用来确定文件类型)

条件判断:
	条件测试类型:1)整数测试 2)字符测试 3)文件测试
	
	条件测试的表达式:1)[ expression ] 2)[[ expression ]] 3)test expression
	
	整数比较:
		-eq:测试两个整数是否相等,等为真返回0,否则返回1-255
		-ne:测试两个整数是否不等
		-gt:测试一个数是否大于另一个数
		-lt:测试一个数是否小于另一个数
		-ge:测试一个数是否大于或等于另一个数
		-le:测试一个数是否小于或等于另一个数
		
	文件测试：
		-e FILE:测试文件是否存在
		-f FILE:测试文件是否为普通文件
		-d FILE:测试指定路径是否为目录
		
		
		
	命令的逻辑关系:
		逻辑与: &&			COMMAND1 && COMMAND2,如果命令1为真,则执行命令2
		逻辑或: ||			COMMAND1 && COMMAND2,如果命令1为假,则执行命令2
		
		如果用户user不存在，就添加用户user
		！ id user && useradd user 第一个条件取反后为0，则执行第二个条件
		id user || useradd user 第一个条件为0，则执行第二个条件
		
	控制结构:
		单分支if语句
			if 条件判断;then
			 statement1
			 statement2
			 ...
			 fi
		双分支的if语句
			if 条件判断; then
			 statement1
			 statement2
			 ...
			else
			 statement3
			 statement4
			 ...
			fi

shell中使用算术运算符:
	1.let 算术运算表达式
		let C=$A+$B
	2.$[算术运算表达式]
		C=$[$A+$B]
	3.$((算术运算表达式))
		C=(($A+$B))
	4.expr命令 算术运算表达式 (表达式中各操作数及运算符之间要有空格,而且命令要使用反引号)
		C= `expr $A + $B` 

exit:退出脚本
	exit 数字(0-255) 当$?为该数字时退出脚本

循环:
for 变量 in 列表;do
	循环体
done

如何生成列表:
{1..100}
`seq 起始数 步进长度 结束数`
`ls /path/to/dir`




























































































